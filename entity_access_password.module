<?php

/**
 * @file
 * Contains hook implementations for entity_access_password module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\entity_access_password\Cache\Context\EntityIsProtectedCacheContext;
use Drupal\entity_access_password\HookHandler\FileDownload;
use Drupal\entity_access_password\HookHandler\LabelReplacer;
use Drupal\entity_access_password\Service\PasswordAccessManagerInterface;

/**
 * Implements hook_theme().
 */
function entity_access_password_theme(): array {
  return [
    'entity_access_password_form' => [
      'variables' => [
        'help_text' => '',
        'hint' => '',
        'form' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function entity_access_password_entity_view_mode_alter(string &$view_mode, EntityInterface $entity): void {
  // Quick return to avoid instantiation.
  if ($view_mode == PasswordAccessManagerInterface::PROTECTED_VIEW_MODE) {
    return;
  }

  /** @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $password_access_manager */
  $password_access_manager = \Drupal::service('entity_access_password.password_access_manager');
  if ($password_access_manager->isEntityViewModeProtected($view_mode, $entity)) {
    $entity->addCacheContexts([EntityIsProtectedCacheContext::CONTEXT_ID . ':' . $entity->getEntityTypeId() . '||' . $entity->id() . '||' . $view_mode]);

    if (!$password_access_manager->hasUserAccessToEntity($entity)) {
      $view_mode = PasswordAccessManagerInterface::PROTECTED_VIEW_MODE;
    }
  }
}

/**
 * Implements hook_file_download().
 *
 * @phpstan-ignore-next-line
 */
function entity_access_password_file_download(string $uri) {
  /** @var \Drupal\entity_access_password\HookHandler\FileDownload $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(FileDownload::class);
  return $instance->fileDownload($uri);
}

/**
 * Implements hook_preprocess_HOOK() for 'html'.
 */
function entity_access_password_preprocess_html(array &$variables): void {
  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(LabelReplacer::class);
  $instance->preprocessHtml($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'page_title'.
 */
function entity_access_password_preprocess_page_title(array &$variables): void {
  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(LabelReplacer::class);
  $instance->preprocessPageTitle($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'node'.
 */
function entity_access_password_preprocess_node(array &$variables): void {
  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(LabelReplacer::class);
  $instance->preprocessNode($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'taxonomy_term'.
 */
function entity_access_password_preprocess_taxonomy_term(array &$variables): void {
  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(LabelReplacer::class);
  $instance->preprocessTaxonomyTerm($variables);
}
